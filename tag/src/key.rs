#![allow(clippy::upper_case_acronyms)]
use std::fmt::Display;

// Taken from Music Brainz Picard as a reference:
// https://picard-docs.musicbrainz.org/en/appendices/tag_mapping.html
#[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]
pub enum TagKey {
    AcoustidID,
    AcoustidIDFingerprint,
    Album,
    AlbumArtist,
    AlbumArtistSortOrder,
    AlbumSortOrder,
    Arranger,
    Artist,
    ArtistSortOrder,
    Artists,
    ASIN,
    Barcode,
    BPM,
    CatalogNumber,
    Comment,
    Compilation,
    Composer,
    ComposerSortOrder,
    Conductor,
    Copyright,
    Director,
    DiscNumber,
    DiscSubtitle,
    EncodedBy,
    EncoderSettings,
    Engineer,
    GaplessPlayback,
    Genre,
    Grouping,
    InitialKey,
    ISRC,
    Language,
    License,
    Lyricist,
    Lyrics,
    Media,
    MixDJ,
    Mixer,
    Mood,
    Movement,
    MovementCount,
    MovementNumber,
    MusicBrainzArtistID,
    MusicBrainzDiscID,
    MusicBrainzOriginalArtistID,
    MusicBrainzOriginalReleaseID,
    MusicBrainzRecordingID,
    MusicBrainzReleaseArtistID,
    MusicBrainzReleaseGroupID,
    MusicBrainzReleaseID,
    MusicBrainzTrackID,
    MusicBrainzTRMID,
    MusicBrainzWorkID,
    MusicIPFingerprint,
    MusicIPPUID,
    OriginalAlbum,
    OriginalArtist,
    OriginalFilename,
    OriginalReleaseDate,
    OriginalReleaseYear,
    Performer,
    Podcast,
    PodcastURL,
    Producer,
    Rating,
    RecordLabel,
    ReleaseCountry,
    ReleaseYear,
    ReleaseDate,
    ReleaseStatus,
    ReleaseType,
    Remixer,
    ReplayGainAlbumGain,
    ReplayGainAlbumPeak,
    ReplayGainAlbumRange,
    ReplayGainReferenceLoudness,
    ReplayGainTrackGain,
    ReplayGainTrackPeak,
    ReplayGainTrackRange,
    Script,
    ShowName,
    ShowNameSortOrder,
    ShowWorkAndMovement,
    Subtitle,
    TotalDiscs,
    TotalTracks,
    TrackNumber,
    TrackTitle,
    TrackTitleSortOrder,
    Website,
    WorkTitle,
    Writer,

    // Internal, not mapped from picard
    Duration,
}

impl Display for TagKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            TagKey::AcoustidID => write!(f, "acoustid_id"),
            TagKey::AcoustidIDFingerprint => write!(f, "acoustid_id_fingerprint"),
            TagKey::Album => write!(f, "album"),
            TagKey::AlbumArtist => write!(f, "album_artist"),
            TagKey::AlbumArtistSortOrder => write!(f, "album_artist_sort_order"),
            TagKey::AlbumSortOrder => write!(f, "album_sort_order"),
            TagKey::Arranger => write!(f, "arranger"),
            TagKey::Artist => write!(f, "artist"),
            TagKey::ArtistSortOrder => write!(f, "artist_sort_order"),
            TagKey::Artists => write!(f, "artists"),
            TagKey::ASIN => write!(f, "asin"),
            TagKey::Barcode => write!(f, "barcode"),
            TagKey::BPM => write!(f, "bpm"),
            TagKey::CatalogNumber => write!(f, "catalog_number"),
            TagKey::Comment => write!(f, "comment"),
            TagKey::Compilation => write!(f, "compilation"),
            TagKey::Composer => write!(f, "composer"),
            TagKey::ComposerSortOrder => write!(f, "composer_sort_order"),
            TagKey::Conductor => write!(f, "conductor"),
            TagKey::Copyright => write!(f, "copyright"),
            TagKey::Director => write!(f, "director"),
            TagKey::DiscNumber => write!(f, "disc_number"),
            TagKey::DiscSubtitle => write!(f, "disc_subtitle"),
            TagKey::EncodedBy => write!(f, "encoded_by"),
            TagKey::EncoderSettings => write!(f, "encoder_settings"),
            TagKey::Engineer => write!(f, "engigneer"),
            TagKey::GaplessPlayback => write!(f, "gapless_playback"),
            TagKey::Genre => write!(f, "genre"),
            TagKey::Grouping => write!(f, "grouping"),
            TagKey::InitialKey => write!(f, "initial_key"),
            TagKey::ISRC => write!(f, "isrc"),
            TagKey::Language => write!(f, "language"),
            TagKey::License => write!(f, "license"),
            TagKey::Lyricist => write!(f, "lyricist"),
            TagKey::Lyrics => write!(f, "lyrics"),
            TagKey::Media => write!(f, "media"),
            TagKey::MixDJ => write!(f, "mix_dj"),
            TagKey::Mixer => write!(f, "mixer"),
            TagKey::Mood => write!(f, "mood"),
            TagKey::Movement => write!(f, "movement"),
            TagKey::MovementCount => write!(f, "movement_count"),
            TagKey::MovementNumber => write!(f, "movement_number"),
            TagKey::MusicBrainzArtistID => write!(f, "music_brainz_artist_id"),
            TagKey::MusicBrainzDiscID => write!(f, "music_brainz_disc_id"),
            TagKey::MusicBrainzOriginalArtistID => write!(f, "music_brainz_original_artist_id"),
            TagKey::MusicBrainzOriginalReleaseID => write!(f, "music_brainz_original_release_id"),
            TagKey::MusicBrainzRecordingID => write!(f, "music_brainz_recording_id"),
            TagKey::MusicBrainzReleaseArtistID => write!(f, "music_brainz_release_artist_id"),
            TagKey::MusicBrainzReleaseGroupID => write!(f, "music_brainz_release_group_id"),
            TagKey::MusicBrainzReleaseID => write!(f, "music_brainz_release_id"),
            TagKey::MusicBrainzTrackID => write!(f, "music_brainz_track_id"),
            TagKey::MusicBrainzTRMID => write!(f, "music_brainz_trmid"),
            TagKey::MusicBrainzWorkID => write!(f, "music_brainz_work_id"),
            TagKey::MusicIPFingerprint => write!(f, "music_ip_fingerprint"),
            TagKey::MusicIPPUID => write!(f, "music_ippuid"),
            TagKey::OriginalAlbum => write!(f, "original_album"),
            TagKey::OriginalArtist => write!(f, "original_artist"),
            TagKey::OriginalFilename => write!(f, "original_filename"),
            TagKey::OriginalReleaseDate => write!(f, "original_release_date"),
            TagKey::OriginalReleaseYear => write!(f, "original_relese_year"),
            TagKey::Performer => write!(f, "performer"),
            TagKey::Podcast => write!(f, "podcast"),
            TagKey::PodcastURL => write!(f, "podcast_url"),
            TagKey::Producer => write!(f, "producer"),
            TagKey::Rating => write!(f, "rating"),
            TagKey::RecordLabel => write!(f, "record_label"),
            TagKey::ReleaseCountry => write!(f, "release_country"),
            TagKey::ReleaseYear => write!(f, "release_year"),
            TagKey::ReleaseDate => write!(f, "release_date"),
            TagKey::ReleaseStatus => write!(f, "release_status"),
            TagKey::ReleaseType => write!(f, "release_type"),
            TagKey::Remixer => write!(f, "remixer"),
            TagKey::ReplayGainAlbumGain => write!(f, "replay_gain_album_gain"),
            TagKey::ReplayGainAlbumPeak => write!(f, "replay_gain_album_peak"),
            TagKey::ReplayGainAlbumRange => write!(f, "replay_gain_album_range"),
            TagKey::ReplayGainReferenceLoudness => write!(f, "replay_gain_reference_loudness"),
            TagKey::ReplayGainTrackGain => write!(f, "replay_gain_track_gain"),
            TagKey::ReplayGainTrackPeak => write!(f, "replay_gain_track_peak"),
            TagKey::ReplayGainTrackRange => write!(f, "replay_gain_track_range"),
            TagKey::Script => write!(f, "script"),
            TagKey::ShowName => write!(f, "show_name"),
            TagKey::ShowNameSortOrder => write!(f, "show_name_sort_order"),
            TagKey::ShowWorkAndMovement => write!(f, "show_work_and_movement"),
            TagKey::Subtitle => write!(f, "subtitle"),
            TagKey::TotalDiscs => write!(f, "total_discs"),
            TagKey::TotalTracks => write!(f, "total_tracks"),
            TagKey::TrackNumber => write!(f, "track_number"),
            TagKey::TrackTitle => write!(f, "track_title"),
            TagKey::TrackTitleSortOrder => write!(f, "track_title_sort_order"),
            TagKey::Website => write!(f, "website"),
            TagKey::WorkTitle => write!(f, "work_title"),
            TagKey::Writer => write!(f, "writer"),

            // Internal, not mapped from picard
            TagKey::Duration => write!(f, "duration"),
        }
    }
}
